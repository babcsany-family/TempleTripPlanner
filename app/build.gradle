apply plugin: 'com.android.application'
apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'dbtools'
apply plugin: 'jacoco'
apply plugin: 'com.github.ben-manes.versions' // ./gradlew dependencyUpdates -Drevision=release

def artOnly = true; // enable a fast build supported ONLY by Android 5.0+

// Manifest version information
def versionMajor = 1
def versionMinor = 0
def versionPatch = 0
def versionBuild = 0
def versionMajorMinorPatch = "${versionMajor}.${versionMinor}.${versionPatch}"
def versionMajorMinorPatchBuild = "${versionMajor}.${versionMinor}.${versionPatch}.${versionBuild}"
def buildTime = new Date().getTime()

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
}

ext {
    // versions for libraries that multiple dependencies
    supportLibVersion = '25.1.1'
    daggerVersion = '2.9'
    loganSquareVersion = '1.3.7'
    okhttpVersion = '3.6.0'
    pocketKnifeVersion = '3.2.1'
    pocketBusVersion = '1.1.0'
    butterKnifeVersion = '8.5.1'
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile 'com.wdullaer:materialdatetimepicker:3.0.0'
    compile 'com.afollestad.material-dialogs:core:0.9.1.0'
    compile 'org.parceler:parceler-api:1.1.6'
    testCompile 'junit:junit:4.12'
    annotationProcessor 'org.parceler:parceler:1.1.6'
    provided 'org.glassfish:javax.annotation:10.0-b28'

    // Android
    compile "com.android.support:appcompat-v7:${supportLibVersion}"
    compile "com.android.support:recyclerview-v7:${supportLibVersion}"
    compile "com.android.support:preference-v14:${supportLibVersion}"
    compile "com.android.support:design:${supportLibVersion}"
    compile "com.android.support:percent:${supportLibVersion}"
    compile "com.android.support:support-annotations:${supportLibVersion}" // includes support-v4
    compile 'com.android.support:multidex:1.0.1'
    compile 'com.google.android.gms:play-services-analytics:10.2.0'

    // UI
    compile "com.vikingsen:pocketknife-core:${pocketKnifeVersion}"
    annotationProcessor "com.vikingsen:pocketknife-compiler:${pocketKnifeVersion}"
    compile "com.jakewharton:butterknife:${butterKnifeVersion}"
    annotationProcessor "com.jakewharton:butterknife-compiler:${butterKnifeVersion}"

    // Code
    compile 'com.google.code.findbugs:jsr305:3.0.1'
    compile 'org.threeten:threetenbp:1.3.3'
    compile "org.dbtools:dbtools-android:$dbtoolsVersion"
    compile 'org.apache.commons:commons-lang3:3.5'
    compile 'commons-io:commons-io:2.5'
    compile 'com.devbrackets.android:recyclerext:2.1.0'
    compile 'com.evernote:android-job:1.1.6'
    compile "com.vikingsen:pocketbus:$pocketBusVersion"
    annotationProcessor "com.vikingsen:pocketbus-compiler:$pocketBusVersion"
    compile 'com.jakewharton.timber:timber:4.5.1'

    // Network
    compile "com.squareup.okhttp3:okhttp:$okhttpVersion"
    compile "com.squareup.okhttp3:logging-interceptor:$okhttpVersion"

    // JSON Parsing
    compile 'com.fasterxml.jackson.core:jackson-core:2.8.6'
    compile "com.bluelinelabs:logansquare:$loganSquareVersion"
    annotationProcessor "com.bluelinelabs:logansquare-compiler:$loganSquareVersion"
    compile 'com.github.aurae.retrofit2:converter-logansquare:1.4.1' // retrofit support

    // Dagger 2
    compile "com.google.dagger:dagger:${daggerVersion}"
    annotationProcessor "com.google.dagger:dagger-compiler:${daggerVersion}"

    // RxJava
    compile 'io.reactivex:rxandroid:1.2.1'
    compile 'io.reactivex:rxjava:1.2.6'

    // Custom SQLite databasethreetenbp
//    compile 'org.sqlite:sqlite-android:3.8.9.0-20150415'
//    compile 'net.sqlcipher:sqlcipher-aar:3.1.0.20140823'

    // Test (Integration)
    // Espresso core dependencies
    androidTestCompile 'com.android.support.test.espresso:espresso-core:2.2.2'
    androidTestCompile 'com.android.support.test:runner:0.5'
    androidTestCompile 'com.google.code.findbugs:jsr305:3.0.1' // fix conflicting issue with jsr305 annotations
    androidTestCompile "com.android.support:support-annotations:${supportLibVersion}" // fix dependency conflict warning

    // Espresso contrib dependencies
    androidTestCompile 'com.android.support.test.espresso:espresso-contrib:2.2.2'
    androidTestCompile "com.android.support:appcompat-v7:${supportLibVersion}"
    androidTestCompile "com.android.support:recyclerview-v7:${supportLibVersion}"
    androidTestCompile "com.android.support:design:${supportLibVersion}"

    // Test (Unit)
    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:2.7.6'
    testCompile 'org.threeten:threetenbp:1.3.3' // required for DBTools java junit tests
    testCompile 'org.xerial:sqlite-jdbc:3.16.1'
    testAnnotationProcessor "com.google.dagger:dagger-compiler:${daggerVersion}"
}

android {
    compileSdkVersion 25
    buildToolsVersion '25.0.2'

    defaultConfig {
        applicationId "com.babcsany.templetripplanner"
        minSdkVersion 15
        targetSdkVersion 25

        if (artOnly) {
            minSdkVersion 21 // temp enable to perform faster builds
        }

        versionCode versionMajor * 10000 + versionMinor * 1000 + versionPatch * 100 + versionBuild
        versionName versionMajorMinorPatch
        buildConfigField "String", "USER_AGENT_APP_NAME", "\"AndroidTemplate\""
        buildConfigField "String", "ANALYTICS_KEY", "\"${getAnalyticsKey()}\""

        multiDexEnabled true
        vectorDrawables.useSupportLibrary = true // do not generate png's for svg files

        // Enable the experimental Jack build tools. (note... may not work with shrinking enabled)
//        jackOptions {
//            enabled true
//        }

        // Espresso
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    packagingOptions {
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/services/javax.annotation.processing.Processor'
        exclude 'LICENSE.txt'
    }

    lintOptions {
        abortOnError true
        disable 'InvalidPackage'
    }

    // set dummy signing values if not defined in ~/.gradle/gradle.properties
    if (!project.hasProperty('myKeystore')) {
        println "Using dummy signing values"
        project.ext.setProperty('myKeystore', 'dummy')
        project.ext.setProperty('myKeystorePassword', 'dummy')
        project.ext.setProperty('myKeyAlias', 'dummy')
        project.ext.setProperty('myKeyPassword', 'dummy')
    }

    // defined values my* in ~/.gradle/gradle.properties
    signingConfigs {
        prodConfig {
            storeFile file(myKeystore)
            storePassword myKeystorePassword
            keyAlias myKeyAlias
            keyPassword myKeyPassword
        }
    }

    buildTypes {
        debug {
            versionNameSuffix '-DEV'
            applicationIdSuffix '.dev'
            buildConfigField "String", "VERSION_NAME_FULL", "\"${versionMajorMinorPatchBuild}-DEV\""
            buildConfigField "long", "BUILD_TIME", "0l" // to improve build times, do allow change on every build
        }
        alpha {
            initWith(buildTypes.release)
            versionNameSuffix '-ALPHA'
            applicationIdSuffix '.dev'
            buildConfigField "String", "VERSION_NAME_FULL", "\"${versionMajorMinorPatchBuild}-ALPHA\""
            buildConfigField "long", "BUILD_TIME", "${buildTime}l"
            debuggable true
            signingConfig signingConfigs.prodConfig
        }
        beta {
            initWith(buildTypes.release)
            versionNameSuffix '-BETA'
            buildConfigField "String", "VERSION_NAME_FULL", "\"${versionMajorMinorPatchBuild}-BETA\""
            buildConfigField "long", "BUILD_TIME", "${buildTime}l"
            signingConfig signingConfigs.prodConfig
        }
        release {
            buildConfigField "String", "VERSION_NAME_FULL", "\"${versionMajorMinorPatchBuild}\""
            buildConfigField "long", "BUILD_TIME", "${buildTime}l"
            versionNameSuffix ''
            minifyEnabled true
            shrinkResources true
            signingConfig signingConfigs.prodConfig
        }
    }

    sourceSets {
        // add dagger generated files (works only with debug build)
//        test.java.srcDirs += ['build/generated/source/apt/test/debug']
    }
}

dbtools {
    type 'ANDROID'

    basePackageName 'com.babcsany.templetripplanner.model.database'
    outputSrcDir 'src/main/java/com/babcsany/templetripplanner/model/database'

    injectionSupport true
    jsr305Support true
    includeDatabaseNameInPackage true
    dateType 'JSR-310'
    sqlQueryBuilderSupport false
    rxJavaSupport true
}

// ===== TEST TASKS =====

// show JUnit failure reason in console (the following may fail tests run from IDE)
tasks.withType(Test) {
    testLogging {
        exceptionFormat "full"
    }
}

// Define coverage source.
// If you have rs/aidl etc... add them here.
def coverageSourceDirs = [
        'src/main/java',
]

// Rename and place "myAnalyticsKey" in global gradle.properties
def getAnalyticsKey() {
    return hasProperty('myAnalyticsKey') ? myAnalyticsKey : ''
}
